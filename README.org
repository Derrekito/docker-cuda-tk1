* TK1 Docker-Based Compiler Environment Guide

** Introduction
The `docker-cuda-tk1` project provides a suite of bash scripts to simplify the creation and management of a Docker container tailored for compiling projects targeted at the ARMv7l architecture, leveraging CUDA 6.5. This is particularly beneficial for projects dependent on the CUDA parallel computing platform and the cuDNN deep neural network library.

** Script Execution Sequence
1. =build_image.sh=
2. =create_container.sh=
3. =run_container.sh=
4. =stop_container.sh= (optional, when needed)

** Detailed Script Overview

*** =build_image.sh=
This script constructs a Docker image equipped with CUDA and cuDNN libraries. Prior to building, it verifies the presence of requisite CUDA and cuDNN files in the current directory, fetching them if absent.

Usage:

- Ensure Docker is installed with appropriate permissions.
- Execute the script. If cuDNN is missing, a URL will be provided for manual download. Once the necessary file is secured, re-run the script.
- Upon successful execution, a Docker image tagged "cudatools:6.5" will be ready.

*** =create_container.sh=
Using the image produced by =build_image.sh=, this script spawns a Docker container. If a local directory is supplied as an argument, it gets mounted inside the container, establishing a file-sharing bridge between your host and the Docker environment. Absence of a local directory will result in a warning, but container creation will proceed.

Usage:

- Optionally specify a local directory to mount inside the container.
- Execute the script. This action will instantiate a Docker container named "docker-cuda".

Examples:

- Sharing a local directory:
#+begin_src bash
./create_container.sh /path/to/local/dir
#+end_src

- Without directory sharing:
#+begin_src bash
./create_container.sh
#+end_src

*** =run_container.sh=
This script either launches or attaches to the "docker-cuda" Docker container, depending on its current state.

Usage:

- Ensure that "docker-cuda" container exists (crafted using =create_container.sh=).
- Run the script to initiate or connect to the "docker-cuda" environment.

*** =stop_container.sh=
This utility halts the "docker-cuda" Docker container. Invoke this whenever you wish to discontinue the "docker-cuda" session.
